from dotenv import load_dotenv

from src.parsers.parser_factory import ParserFactory
from src.test_readers.junit_reader import JUnitReader

load_dotenv()
file_name = './data/pytest_coverage.xml'

def run_parser_test(filename: str):
    parser = ParserFactory.get_parser('pytest')
    data = parser.parse_and_normalise(file_name)
    print(data)

def run_reader_test(filename: str):
    reader = JUnitReader()
    report = reader.read(filename)
    print(report)


# def run_all(''):

import textwrap
from typing import Dict, List
import re

class TestResultFormatter:
    def _format_test_messages(self, messages: Dict[str, List[str]]) -> str:
        formatted_messages = []
        for test_suite, test_results in messages.items():
            formatted_messages.append(f"**{test_suite}** (Failed Tests: {len(test_results)})")
            for idx, result in enumerate(test_results, 1):
                test_name = self._extract_test_name(result)
                formatted_messages.append(f"{idx}. {test_name}")
        return "\n".join(formatted_messages)

    def _format_embed_description(self, message: str) -> str:
        return f"Test Results Summary:\n\n{message[:2000]}"

    def _extract_test_name(self, result: str) -> str:
        match = re.match(r"(\w+):", result)
        return match.group(1) if match else "Unknown Test"

    def format_detailed_results(self, messages: Dict[str, List[str]]) -> List[str]:
        detailed_results = []
        for test_suite, test_results in messages.items():
            for result in test_results:
                test_name = self._extract_test_name(result)
                truncated_result = textwrap.shorten(result, width=500, placeholder="...")
                detailed_results.append(f"**{test_name}**\n```\n{truncated_result}\n```")
        return detailed_results

class TestResultFormatterAlternative:
    def _format_test_messages(self, messages: Dict[str, List[str]]) -> str:
        total_failed = sum(len(tests) for tests in messages.values())
        summary = f"Total Failed Tests: {total_failed}\n\n"
        for test_suite, test_results in messages.items():
            summary += f"**{test_suite}** (Failed: {len(test_results)})\n"
            for result in test_results:
                test_name = self._extract_test_name(result)
                summary += f"- {test_name}\n"
        return summary

    def _format_embed_description(self, message: str) -> str:
        return f"❌ Test Failure Summary:\n\n{message[:2000]}"

    def _extract_test_name(self, result: str) -> str:
        match = re.match(r"(\w+):", result)
        return match.group(1) if match else "Unknown Test"

    def format_error_details(self, messages: Dict[str, List[str]]) -> List[Dict[str, str]]:
        error_details = []
        for test_suite, test_results in messages.items():
            for result in test_results:
                test_name = self._extract_test_name(result)
                error_message = self._extract_error_message(result)
                error_details.append({
                    "name": f"{test_suite}: {test_name}",
                    "value": error_message[:1024]  # Discord field value limit
                })
        return error_details

    def _extract_error_message(self, result: str) -> str:
        lines = result.split('\n')
        for i, line in enumerate(lines):
            if line.startswith('>') or line.startswith('E'):
                return '\n'.join(lines[i:i+5])  # Return 5 lines starting from the error
        return "No specific error message found"

# Usage example
formatter = TestResultFormatter()
alt_formatter = TestResultFormatterAlternative()

test_messages = {
    'pytest': [
        'test_get_movie_by_id: self\n = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n params = [10, \'Price growth bed.\', \'Career however force however may. Institution\n near speech thank much. Create suggest think crime month. Might option return care\n child.\', \'In Production\', 92, \'/MsoMYC5ZkN.jpg\', ...]\n commit = None\n\n def execute_sql(self, sql, params=None, commit=None):\n if commit is not None:\n **deprecated**(\'"commit" has been deprecated and is a no-op.\')\n logger.debug((sql, params))\n with __exception_wrapper__:\n cursor = self.cursor()\n > cursor.execute(sql...',
        # ... more test results ...
    ]
}


test_messages = {
    'pytest': ['test_add_subscription: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>, sql = \'INSERT INTO\n                `server` (`server_id`) VALUES (%s)\', params = [1], commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>, query =\n                b\'INSERT INTO `server` (`server_id`) VALUES (1)\'\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'1\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self =\n                <test.services.test_movie_subscriptions_service.TestMovieSubscriptionsService\n                object at 0x000002AA7AD24340>\n\n                def test_add_subscription(self):\n                """Making sure subscriptions are added."""\n                > server = ServerFactory.create()\n                test\\services\\test_movie_subscriptions_service.py:34:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>, query =\n                b\'INSERT INTO `server` (`server_id`) VALUES (1)\'\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'1\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_add_movie: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [1, \'Same interview.\', \'Bill cup floor study. Girl recognize too\n                week.\\nInstead off seven realize suffer consumer list...ant person allow.\\nTo impact\n                space. Politics only fear nor loss market.\', \'In Production\', 152,\n                \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... only fear nor loss market.\', \'In\n                Production\', 152, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 6236,\n                1.736e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'1\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_movies_service.TestMoviesService object at\n                0x000002AA7AD25F30>\n\n                def test_add_movie(self):\n                """Tests that add movie is successful"""\n                movie = MovieFactory.build()\n                > self.service.add_movie(movie=movie)\n\n                test\\services\\test_movies_service.py:29:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                services\\saved_movies_service.py:58: in add_movie\n                movie.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... only fear nor loss market.\', \'In\n                Production\', 152, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 6236,\n                1.736e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'1\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_get_movie_by_title: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [2, \'Test Movie\', \'Degree dark consumer keep any. Million design field ask\n                letter.\\nSong small media alone. Political former street other dream year.\',\n                \'Released\', 224, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...er street other dream year.\',\n                \'Released\', 224, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 2027,\n                3.37877602e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'2\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_movies_service.TestMoviesService object at\n                0x000002AA7AD261D0>\n\n                def test_get_movie_by_title(self):\n                """Tests our Movie can be found!"""\n                title = "Test Movie"\n                > movie = MovieFactory.create(title=title)\n                test\\services\\test_movies_service.py:36:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...er street other dream year.\',\n                \'Released\', 224, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 2027,\n                3.37877602e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'2\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_get_movie_by_title_exact: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [3, \'Movie_title_0\', \'Particularly owner second teach describe. Strategy\n                five court religious cup fish. Sell himself there girl rule factor. Stock group\n                parent eight trade remain.\', \'Released\', 95, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...p parent eight trade remain.\',\n                \'Released\', 95, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 5896,\n                1.11741181e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'3\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_movies_service.TestMoviesService object at\n                0x000002AA7AD26470>\n\n                def test_get_movie_by_title_exact(self):\n                """With Multiple entries returns exact match"""\n                for i in range(3):\n                > self.service.add_movie(movie=MovieFactory.build(title=f"Movie_title_{i}"))\n                test\\services\\test_movies_service.py:45:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                services\\saved_movies_service.py:58: in add_movie\n                movie.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...p parent eight trade remain.\',\n                \'Released\', 95, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 5896,\n                1.11741181e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'3\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_get_movie_by_id: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [1, \'Us table a once.\', \'Control story car contain. Want within old\n                physical with. Yeah idea local leg church sure. Soon heavy number about guess.\', \'In\n                Production\', 193, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...umber about guess.\', \'In Production\',\n                193, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 2023, 8.497186136291e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'1\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_movies_service.TestMoviesService object at\n                0x000002AA7AD26710>\n\n                def test_get_movie_by_id(self):\n                """Verify movie is found with ID and movie raises for unfound movie"""\n                > movie = MovieFactory.create(movie_id=1)\n\n                test\\services\\test_movies_service.py:54:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...umber about guess.\', \'In Production\',\n                193, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 2023, 8.497186136291e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'1\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_movie_exists: self\n                = <test.services.test_movies_service.TestMoviesService object at\n                0x000002AA7AD269B0>\n\n                def test_movie_exists(self):\n                """Verifies an added movie is in the service"""\n                assert not self.service.movie_exists(movie_id=0)\n\n                movie = MovieFactory.build(movie_id=0)\n                self.service.add_movie(movie=movie)\n\n                > assert self.service.movie_exists(movie_id=0)\n                E assert False\n                E + where False = <bound method MainMovieService.movie_exists of\n                <services.saved_movies_service.MainMovieService object at\n                0x000002AA7C334AF0>>(movie_id=0)\n                E + where <bound method MainMovieService.movie_exists of\n                <services.saved_movies_service.MainMovieService object at\n                0x000002AA7C334AF0>> = <services.saved_movies_service.MainMovieService\n                object at 0x000002AA7C334AF0>.movie_exists\n                E + where <services.saved_movies_service.MainMovieService object at\n                0x000002AA7C334AF0> = <test.services.test_movies_service.TestMoviesService\n                object at 0x000002AA7AD269B0>.service\n\n                test\\services\\test_movies_service.py:69: AssertionError', 'test_update_movie: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [6, \'Process analysis baby consider.\', \'Add word American fish\n                analysis.\\nAmerican officer exist least pretty. Free natural offer million.\n                Scientist yard expert here list reason floor guy.\', \'In Production\', 180,\n                \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...re list reason floor guy.\', \'In\n                Production\', 180, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 7616,\n                9.93888e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'6\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_movies_service.TestMoviesService object at\n                0x000002AA7AD26C50>\n\n                def test_update_movie(self):\n                """Checks we successfully update movie attribute with udpate_movie"""\n                > movie = MovieFactory.create()\n\n                test\\services\\test_movies_service.py:73:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...re list reason floor guy.\', \'In\n                Production\', 180, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 7616,\n                9.93888e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'6\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_create_movie_model: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [7, \'Thousand style.\', \'Carry along red. We yeah anything. Democratic\n                ground threat front already official guy. Team effort sure environment.\',\n                \'Released\', 64, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... Team effort sure environment.\',\n                \'Released\', 64, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 5416,\n                8.217062e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'7\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_movies_service.TestMoviesService object at\n                0x000002AA7AD26EF0>\n\n                def test_create_movie_model(self):\n                """Tests that a valid MovieFullDetailsModel is created"""\n                genre1 = GenreFactory.create()\n                genre2 = GenreFactory.create()\n                > movie = MovieFactory.create()\n\n                test\\services\\test_movies_service.py:92:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... Team effort sure environment.\',\n                \'Released\', 64, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 5416,\n                8.217062e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'7\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_add_server_movie: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `server_movie` (`server_id`, `user_id`, `movie_id`, `is_watched`,\n                `created_at`, `modified_at`) VALUES (%s, %s, %s, %s, %s, %s)\'\n                params = [2, 19, 8, False, datetime.datetime(2024, 8, 31, 10, 40, 25, 461646),\n                datetime.datetime(2024, 8, 31, 10, 40, 25, 461646)], commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `server_movie` (`server_id`, `user_id`, `movie_id`,\n                `is_watched`, `created_at`, `modified_at`) VALUES (2, 19, 8, 0, \'2024-08-31\n                10:40:25.461646\', \'2024-08-31 10:40:25.461646\')"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1452, \'Cannot add or update a child row: a foreign key\n                constraint fails (`cinebot_test2`.`server_movie`, CONSTRAINT `server_movie_ibfk_1`\n                FOREIGN KEY (`server_id`) REFERENCES `server` (`server_id`) ON DELETE CASCADE)\')\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD26860>\n\n                def test_add_server_movie(self):\n                """Test add movie by ids"""\n                server_movie = ServerMovieFactory.build()\n\n                > self.server_movies_service.add_movie(server_id=server_movie.server_id,\n                user_id=server_movie.user_id, movie_id=server_movie.movie_id)\n                test\\services\\test_server_movies_service.py:34:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                services\\server_movies_service.py:114: in add_movie\n                return self.save_movie(movie=server_movie)\n                services\\server_movies_service.py:118: in save_movie\n                movie.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `server_movie` (`server_id`, `user_id`, `movie_id`,\n                `is_watched`, `created_at`, `modified_at`) VALUES (2, 19, 8, 0, \'2024-08-31\n                10:40:25.461646\', \'2024-08-31 10:40:25.461646\')"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1452, \'Cannot add or update a child row: a foreign key\n                constraint fails (`cinebot_test2`.`server_movie`, CONSTRAINT `server_movie_ibfk_1`\n                FOREIGN KEY (`server_id`) REFERENCES `server` (`server_id`) ON DELETE CASCADE)\')\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_duplicate_add_server_movie: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [9, \'Movement night time.\', \'West impact modern outside national. Street\n                product around.\\nThem another heart use. Account always activity part history leg.\n                Public shoulder charge you.\', \'Released\', 108, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...ublic shoulder charge you.\', \'Released\',\n                108, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 4476, 9.106861948e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'9\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD25D80>\n\n                def test_duplicate_add_server_movie(self):\n                """Test adding duplicate entry of server movies"""\n                > server_movie = ServerMovieFactory.create()\n                test\\services\\test_server_movies_service.py:40:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...ublic shoulder charge you.\', \'Released\',\n                108, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 4476, 9.106861948e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'9\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_get_movie_by_id: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [10, \'Price growth bed.\', \'Career however force however may. Institution\n                near speech thank much. Create suggest think crime month. Might option return care\n                child.\', \'In Production\', 92, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...t option return care child.\', \'In\n                Production\', 92, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 7996,\n                4.3586e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'10\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD540A0>\n\n                def test_get_movie_by_id(self):\n                """Verifies a valid server movie is created"""\n                > server_movie = ServerMovieFactory()\n                test\\services\\test_server_movies_service.py:53:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:40: in __call__\n                return cls.create(**kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...t option return care child.\', \'In\n                Production\', 92, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 7996,\n                4.3586e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'10\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_movie_exists: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [11, \'Able run surface.\', \'Few ability standard better course add. Morning\n                true force together rather task serious. Small window bag participant still join\n                later.\', \'Released\', 111, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...ag participant still join later.\',\n                \'Released\', 111, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 3702, 1.223e0)"\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'11\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD545E0>\n\n                def test_movie_exists(self):\n                """Checks validaity of movie_exists"""\n\n                assert not self.server_movies_service.movie_exists(movie_id=1, server_id=2)\n\n                > sm1 = ServerMovieFactory.create()\n                test\\services\\test_server_movies_service.py:73:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...ag participant still join later.\',\n                \'Released\', 111, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 3702, 1.223e0)"\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'11\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_search_by_title: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [12, \'Cinebot: The Mockumentary\', \'Huge type me. Protect true may question\n                heavy traditional.\\nMiss detail sense about...vel single.\\nBehind boy arrive modern\n                miss I.\\nAdd lead kitchen they.\', \'Post Production\', 202, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...\\nAdd lead kitchen they.\', \'Post\n                Production\', 202, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 9060,\n                8.1343e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'12\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD54880>\n\n                def test_search_by_title(self):\n                """Search By Title"""\n                title = \'Cinebot: The Mockumentary\'\n                server_id = 100\n                > movie = MovieFactory.create(title=title)\n                test\\services\\test_server_movies_service.py:83:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...\\nAdd lead kitchen they.\', \'Post\n                Production\', 202, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 9060,\n                8.1343e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'12\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_search_title_movie_not_in_server_raises: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [13, \'Random Movie Title\', \'Well answer your instead girl adult relate.\n                Skill full away medical occur party practice. White region matter onto against. Fact\n                guess evidence design.\', \'In Production\', 91, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...uess evidence design.\', \'In Production\',\n                91, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 4523, 3.3226526014e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'13\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD54DC0>\n\n                def test_search_title_movie_not_in_server_raises(self):\n                """Add Movie in separate server and try to search in incorrect title raises Movie\n                Not Found"""\n                server = ServerFactory.create(server_id=100)\n                > movie = MovieFactory.create(title=\'Random Movie Title\')\n                test\\services\\test_server_movies_service.py:116:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...uess evidence design.\', \'In Production\',\n                91, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 4523, 3.3226526014e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'13\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_list_all_movies: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [14, \'Laugh throw.\', \'City information red brother room recently. Teach\n                realize green poor again new. Child night empl...nSeven agree federal sing nearly\n                season. Bank into task choice success.\', \'In Production\', 128, \'/MsoMYC5ZkN.jpg\',\n                ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...ank into task choice success.\', \'In\n                Production\', 128, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 7990, 9.8e0)"\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'14\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD55060>\n\n                def test_list_all_movies(self):\n                """Returns all movies associated with given server"""\n                server_id = 100\n                server_movie_count = 5\n                server = ServerFactory(server_id=server_id)\n                > ServerMovieFactory.create_batch(server_movie_count, server_id=server)\n                test\\services\\test_server_movies_service.py:136:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:540: in create_batch\n                return [cls.create(**kwargs) for _ in range(size)]\n                .venv\\lib\\site-packages\\factory\\base.py:540: in <listcomp>\n                return [cls.create(**kwargs) for _ in range(size)]\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...ank into task choice success.\', \'In\n                Production\', 128, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 7990, 9.8e0)"\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'14\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_list_unwatched_movies: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [15, \'Admit debate.\', \'Simply later study citizen. Use high\n                player.\\nRecently that girl trouble. Work heavy tax page act. Note price cost four\n                market how.\', \'Released\', 113, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... Note price cost four market how.\',\n                \'Released\', 113, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 1021, 9.26e0)"\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'15\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD55300>\n\n                def test_list_unwatched_movies(self):\n                """Return all unwatched movies in given server"""\n                server_id = 100\n                server_movie_count = 4\n\n                server = ServerFactory(server_id=server_id)\n                # Create half unwatched\n                for _ in range(server_movie_count // 2):\n                > ServerMovieFactory.create(server=server, is_watched=False)\n                test\\services\\test_server_movies_service.py:155:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... Note price cost four market how.\',\n                \'Released\', 113, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 1021, 9.26e0)"\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'15\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_remove_movie: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [16, \'Recently might.\', \'Time one group risk bit others. Decade if step\n                analysis Mrs what better reach. Leave physical...t my quality authority war during\n                region. Cup some source police local.\', \'In Production\', 163, \'/MsoMYC5ZkN.jpg\',\n                ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...Cup some source police local.\', \'In\n                Production\', 163, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 9116, 2.2e0)"\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'16\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD555A0>\n\n                def test_remove_movie(self):\n                """Remove movie from specific server"""\n                > server_movie = ServerMovieFactory.create()\n                test\\services\\test_server_movies_service.py:167:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...Cup some source police local.\', \'In\n                Production\', 163, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 9116, 2.2e0)"\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'16\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_remove_movie_different_server: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [17, \'Republican.\', \'Political girl smile near situation write fly serve.\n                Sometimes boy view candidate machine from director direction. Former car president\n                stay four difficult believe.\', \'Released\', 235, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... four difficult believe.\', \'Released\',\n                235, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 224, 6.774207350705e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'17\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD55840>\n\n                def test_remove_movie_different_server(self):\n                """Handling when trying to remove movie from wrong server"""\n                server = ServerFactory.create(server_id=100)\n                > server_movie = ServerMovieFactory.create(server=server)\n                test\\services\\test_server_movies_service.py:178:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... four difficult believe.\', \'Released\',\n                235, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 224, 6.774207350705e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'17\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_mark_watch: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [18, \'Sport he.\', \'Station act remain attorney state. Between these animal\n                exist.\\nPm face increase card country remain table. Open must traditional cut.\',\n                \'Post Production\', 147, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...traditional cut.\', \'Post Production\',\n                147, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 8251, 8.811596706703e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'18\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD55AE0>\n\n                def test_mark_watch(self):\n                """Mark unwatched movie as watched"""\n                yesterday = datetime.datetime.now() - datetime.timedelta(days=1)\n                > server_movie = ServerMovieFactory.create(is_watched=False,\n                created_at=yesterday, modified_at=yesterday)\n                test\\services\\test_server_movies_service.py:190:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...traditional cut.\', \'Post Production\',\n                147, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 8251, 8.811596706703e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'18\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_server_movie_count: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [19, \'Activity hospital.\', \'Would training song movement miss wind. That\n                back air itself. Forward song spring about re...apital interesting glass authority\n                prepare. Road continue him back soon.\', \'In Production\', 67, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... continue him back soon.\', \'In\n                Production\', 67, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 828,\n                5.12473772e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'19\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD55D80>\n\n                def test_server_movie_count(self):\n                """Counts the number of movies by server"""\n                assert self.server_movies_service.server_movie_count(server_id=100) == 0\n\n                s1 = ServerFactory.create(server_id=100)\n                s2 = ServerFactory.create(server_id=200)\n                s1_count = 5\n                s2_count = 3\n                > ServerMovieFactory.create_batch(s1_count, server=s1)\n                test\\services\\test_server_movies_service.py:207:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:540: in create_batch\n                return [cls.create(**kwargs) for _ in range(size)]\n                .venv\\lib\\site-packages\\factory\\base.py:540: in <listcomp>\n                return [cls.create(**kwargs) for _ in range(size)]\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke... continue him back soon.\', \'In\n                Production\', 67, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 828,\n                5.12473772e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'19\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_server_unwatched_movie_count: self\n                = <peewee.MySQLDatabase object at 0x000002AA7A78A770>\n                sql = \'INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_key`, `num_votes`, `avg_vote`) VALUES (%s,\n                %s, %s, %s, %s, %s, %s, %s, %s, %s)\'\n                params = [20, \'Own so.\', \'Wall cell majority call raise by. Environmental life\n                energy rate relate news office. Finish popular step hair return garden author. Bed\n                market keep explain model billion now.\', \'Released\', 224, \'/MsoMYC5ZkN.jpg\', ...]\n                commit = None\n\n                def execute_sql(self, sql, params=None, commit=None):\n                if commit is not None:\n                __deprecated__(\'"commit" has been deprecated and is a no-op.\')\n                logger.debug((sql, params))\n                with __exception_wrapper__:\n                cursor = self.cursor()\n                > cursor.execute(sql, params or ())\n\n                .venv\\lib\\site-packages\\peewee.py:3322:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...eep explain model billion now.\',\n                \'Released\', 224, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 577,\n                3.534366e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E MySQLdb.IntegrityError: (1062, "Duplicate entry \'20\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError\n\n                During handling of the above exception, another exception occurred:\n\n                self = <test.services.test_server_movies_service.TestServerMoviesService object\n                at 0x000002AA7AD56020>\n\n                def test_server_unwatched_movie_count(self):\n                """Counts the number of movies that are unwatched by server"""\n                assert self.server_movies_service.server_movie_count(server_id=100) == 0\n\n                s1 = ServerFactory.create(server_id=100)\n                server_count = 4\n                for _ in range(server_count // 2):\n                > ServerMovieFactory.create(server=s1, is_watched = False)\n                test\\services\\test_server_movies_service.py:220:\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n                .venv\\lib\\site-packages\\factory\\base.py:528: in create\n                return cls._generate(enums.CREATE_STRATEGY, kwargs)\n                .venv\\lib\\site-packages\\factory\\base.py:465: in _generate\n                return step.build()\n                .venv\\lib\\site-packages\\factory\\builder.py:258: in build\n                step.resolve(pre)\n                .venv\\lib\\site-packages\\factory\\builder.py:199: in resolve\n                self.attributes[field_name] = getattr(self.stub, field_name)\n                .venv\\lib\\site-packages\\factory\\builder.py:344: in __getattr__\n                value = value.evaluate_pre(\n                .venv\\lib\\site-packages\\factory\\declarations.py:48: in evaluate_pre\n                return self.evaluate(instance, step, context)\n                .venv\\lib\\site-packages\\factory\\declarations.py:395: in evaluate\n                return step.recurse(subfactory, extra, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:216: in recurse\n                return builder.build(parent_step=self, force_sequence=force_sequence)\n                .venv\\lib\\site-packages\\factory\\builder.py:262: in build\n                instance = self.factory_meta.instantiate(\n                .venv\\lib\\site-packages\\factory\\base.py:317: in instantiate\n                return self.factory._create(model, *args, **kwargs)\n                test\\factories\\base.py:27: in _create\n                model = target_class.create(**kwargs)\n                .venv\\lib\\site-packages\\peewee.py:6741: in create\n                inst.save(force_insert=True)\n                .venv\\lib\\site-packages\\peewee.py:6951: in save\n                pk = self.insert(**field_dict).execute()\n                .venv\\lib\\site-packages\\peewee.py:2036: in inner\n                return method(self, database, *args, **kwargs)\n                .venv\\lib\\site-packages\\peewee.py:2107: in execute\n                return self._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2912: in _execute\n                return super(Insert, self)._execute(database)\n                .venv\\lib\\site-packages\\peewee.py:2625: in _execute\n                cursor = database.execute(self)\n                .venv\\lib\\site-packages\\peewee.py:3330: in execute\n                return self.execute_sql(sql, params)\n                .venv\\lib\\site-packages\\peewee.py:3320: in execute_sql\n                with __exception_wrapper__:\n                .venv\\lib\\site-packages\\peewee.py:3088: in __exit__\n                reraise(new_type, new_type(exc_value, *exc_args), traceback)\n                .venv\\lib\\site-packages\\peewee.py:196: in reraise\n                raise value.with_traceback(tb)\n                .venv\\lib\\site-packages\\peewee.py:3322: in execute_sql\n                cursor.execute(sql, params or ())\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:179: in execute\n                res = self._query(mogrified_query)\n                .venv\\lib\\site-packages\\MySQLdb\\cursors.py:330: in _query\n                db.query(q)\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                _ _ _ _ _ _ _ _ _ _ _ _\n\n                self = <_mysql.connection open to \'localhost\' at 000002AA79627CC0>\n                query = b"INSERT INTO `movie` (`movie_id`, `title`, `overview`, `status`, `runtime`,\n                `poster_key`, `backdrop_key`, `trailer_ke...eep explain model billion now.\',\n                \'Released\', 224, \'/MsoMYC5ZkN.jpg\', \'/kFx3e5cN93.jpg\', \'6Fq2sdFHzQ\', 577,\n                3.534366e0)"\n\n                def query(self, query):\n                # Since _mysql releases GIL while querying, we need immutable buffer.\n                if isinstance(query, bytearray):\n                query = bytes(query)\n                > _mysql.connection.query(self, query)\n                E peewee.IntegrityError: (1062, "Duplicate entry \'20\' for key \'PRIMARY\'")\n                .venv\\lib\\site-packages\\MySQLdb\\connections.py:261: IntegrityError', 'test_failing_test: def test_failing_test():\n                """Used to test we are failing"""\n                > assert 1 == 2\n                E assert 1 == 2\n\n                test\\utils\\test_utils.py:65: AssertionError']
}
# Using TestResultFormatter
summary = formatter._format_test_messages(test_messages)
embed_description = formatter._format_embed_description(summary)
detailed_results = formatter.format_detailed_results(test_messages)

# Using TestResultFormatterAlternative
alt_summary = alt_formatter._format_test_messages(test_messages)
alt_embed_description = alt_formatter._format_embed_description(alt_summary)
error_details = alt_formatter.format_error_details(test_messages)

print("Standard Formatter Summary:")
print(embed_description)
print("\nDetailed Results (first item):")
print(detailed_results[0] if detailed_results else "No detailed results")

print("\nAlternative Formatter Summary:")
print(alt_embed_description)
print("\nError Details (first item):")
print(error_details[0] if error_details else "No error details")


# run_reader_test('./data/test_pytest_result.xml')
